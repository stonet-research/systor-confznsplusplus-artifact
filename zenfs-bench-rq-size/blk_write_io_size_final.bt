/*
 *
 * Get the average write I/O size.
 * 
 * Arguments:
 * device name - e.g. nvme0n2
 *
 * Output format:
 * @size: average size of the write I/Os
 */

#include <linux/blkdev.h>
#include <linux/blk-mq.h>
#include <linux/nvme.h>

#define SECTOR_SHIFT 9

BEGIN {
    @REQ_OP_BITS = 8;
    @REQ_OP_MASK = ((1 << @REQ_OP_BITS) - 1);
}

k:nvme_setup_cmd / ((struct request *)arg1)->q->disk->disk_name == str($1) / {
    $nvme_cmd = (struct nvme_command *)*(arg1+sizeof(struct request));
    $cmd = (((struct request *)arg1)->cmd_flags & @REQ_OP_MASK);
    $opcode = (uint8)$nvme_cmd->rw.opcode;
    if($cmd == REQ_OP_WRITE || $cmd == REQ_OP_ZONE_APPEND) {
        $data_len = (((struct request *)arg1)->__data_len >> SECTOR_SHIFT);
        @write_count = count();
        @write_size = avg($data_len);
        @write_sum=sum($data_len);
    }

    if($cmd == REQ_OP_ZONE_RESET || (($cmd == REQ_OP_DRV_OUT && $opcode == nvme_cmd_zone_mgmt_send) && $nvme_cmd->zms.zsa == NVME_ZONE_RESET)) {
        @reset_count = count();
    }

    // reset all zones
    if($cmd == REQ_OP_ZONE_RESET_ALL) {
        @reset_all_count = count();
    }

}

END {
    clear(@REQ_OP_BITS);
    clear(@REQ_OP_MASK);
}
