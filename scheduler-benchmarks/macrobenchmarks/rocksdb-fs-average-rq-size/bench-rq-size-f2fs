#! /bin/bash

set -e

# Check input
if [ $# != 1 ]; then
    echo "Usage: $0 <ZNS device (e.g., nvme0n2)>"
    exit 1
fi

# Output
DATA_FILE=${DEV}-req-f2fs-$(date +"%Y_%m_%d_%I_%M_%p").dat
DATA_FILE_OUT=${DEV}-out-req-f2fs-$(date +"%Y_%m_%d_%I_%M_%p").dat

# Binaries
DBBENCH="../../../tools/rocksdb/db_bench"
ZENFS="../../../tools/rocksdb/plugin/zenfs/util/zenfs"
NULLBLK="../../../util/nullblk_create"

# Device infornation
DEV=$(echo $1 | sed 's/vme/g/g')
DEV_SECT_SIZE=$(cat /sys/block/$1/queue/hw_sector_size)
DEV_ZONE_SIZE_BLOCKS=$(cat /sys/block/$1/queue/chunk_sectors)
DEV_ZONE_SIZE=$(echo "${DEV_ZONE_SIZE_BLOCKS} * 512" | bc)
DEV_ZONES=$(cat /sys/block/$1/queue/nr_zones)

echo "#########################################################"
echo "####################### ZNS  SETUP ######################"
echo "#########################################################"
echo "---------------------------------------------------------"
printf 'DEV: %52s\n' "/dev/${DEV}"
echo "---------------------------------------------------------"
printf 'SECTOR_SIZE: %44s\n' "${DEV_SECT_SIZE}"
echo "---------------------------------------------------------"
printf 'ZONE_SIZE_BLOCKS: %39s\n' "${DEV_ZONE_SIZE_BLOCKS}"
echo "---------------------------------------------------------"
printf 'ZONE_SIZE_BYTES: %40s\n' "${DEV_ZONE_SIZE}"
echo "---------------------------------------------------------"
printf 'DEV_ZONES: %46s\n' "${DEV_ZONES}"
echo "---------------------------------------------------------"
echo ""

mkdir -p data

CAP_SECTORS=$(sudo blkzone report -c 5 /dev/$1 | grep -oP '(?<=cap )[0-9xa-f]+' | head -1)
ZONE_CAP=$((${CAP_SECTORS} * 512))
WB_SIZE=$((2 * 1024 * 1024 * 1024))

echo mq-deadline | sudo tee /sys/block/$1/queue/scheduler
sudo nvme zns reset-zone /dev/$1 -a

## Start the F2FS benchmark
# TODO: REMOVE STATIC LINK AND HAVE MODULE FOR ROCKSDB AND ZENFS
DEV=$(sudo ${NULLBLK} 4096 7168)  # TODO: remove hardcode
export DEV
sudo env "PATH=${PATH}" mkfs.f2fs -f -m -c /dev/${1} /dev/${DEV}
sudo mkdir -p /mnt/bench-f2fs
sudo mount -t f2fs /dev/${DEV} /mnt/bench-f2fs

# (sudo ~/src/bpftrace/build/src/bpftrace ./trace.bt $1 -o data/${DATA_FILE}) &
sudo bpftrace ./blk_write_io_size_final.bt $1 -o data/${DATA_FILE}-fill &
bpfpid=$!
# Sleep to ensure bpftrace has started
sleep 10

# Fill the 1st namespace with data
sudo ${DBBENCH} \
    --db=/mnt/bench-f2fs/db0 --wal_dir=/mnt/bench-f2fs/wal0 \
    --benchmarks=fillrandom \
    --use_existing_db=0 \
    --num=10000000 \
    --compression_type=none \
    --value_size=4000 \
    --key_size=16 \
    --target_file_size_base=$(($ZONE_CAP * 2 * 65 / 100)) \
    --use_direct_io_for_flush_and_compaction \
    --max_bytes_for_level_multiplier=4 \
    --max_background_jobs=8 \
    --use_direct_reads \
    --write_buffer_size=${WB_SIZE} \
    --seed=42 \
    --histogram=1 > data/${DATA_FILE_OUT} \
    --use_fsync=1 \
    --sync=1
sudo kill $bpfpid

workload_switch_time=$(date +"%H:%M:%S")
sudo bpftrace ./blk_write_io_size_final.bt $1 -o data/${DATA_FILE}-overwrite &
bpfpid=$!
sleep 10

# Start overwriting and generating some active GC
sudo ${DBBENCH} \
    --db=/mnt/bench-f2fs/db0 --wal_dir=/mnt/bench-f2fs/wal0 \
    --benchmarks=overwrite \
    --use_existing_db=1 \
    --num=$((10000000/8)) \
    --compression_type=none \
    --value_size=4000 \
    --key_size=16 \
    --target_file_size_base=$(($ZONE_CAP * 2 * 65 / 100)) \
    --use_direct_io_for_flush_and_compaction \
    --max_bytes_for_level_multiplier=4 \
    --max_background_jobs=8 \
    --use_direct_reads \
    --write_buffer_size=${WB_SIZE} \
    --seed=42 \
    --histogram=1 >> data/${DATA_FILE_OUT} \
    --use_fsync=1 \
    --sync=1
sudo kill $bpfpid

wait $!\
echo "(${workload_switch_time}, 4)" >> data/${DATA_FILE}
