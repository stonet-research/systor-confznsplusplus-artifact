#! /bin/bash

set -e

if [ $# != 1 ]; then
    echo "Usage: $0 <ZNS device (e.g., nvme0n2)> $1 <zones to finish (e.g., 300)>"
    exit 1
fi
DEV=$1
FINISH_SIZE=$2

# Output
mkdir -p data

# Binaries
FIO="../../../../../tools/fio/fio"

# Device info
DEV_CHAR=$(echo ${DEV} | sed 's/vme/g/g')
DEV_SECT_SIZE=$(cat /sys/block/${DEV}/queue/hw_sector_size)
DEV_ZONE_SIZE_BLOCKS=$(cat /sys/block/${DEV}/queue/chunk_sectors)
DEV_ZONE_SIZE=$(echo "${DEV_ZONE_SIZE_BLOCKS} * 512" | bc)
DEV_ZONES=$(cat /sys/block/${DEV}/queue/nr_zones)

echo "#########################################################"
echo "####################### ZNS  SETUP ######################"
echo "#########################################################"
echo "---------------------------------------------------------"
printf 'DEV: %52s\n' "/dev/${DEV}"
echo "---------------------------------------------------------"
printf 'SECTOR_SIZE: %44s\n' "${DEV_SECT_SIZE}"
echo "---------------------------------------------------------"
printf 'ZONE_SIZE_BLOCKS: %39s\n' "${DEV_ZONE_SIZE_BLOCKS}"
echo "---------------------------------------------------------"
printf 'ZONE_SIZE_BYTES: %40s\n' "${DEV_ZONE_SIZE}"
echo "---------------------------------------------------------"
printf 'DEV_ZONES: %46s\n' "${DEV_ZONES}"
echo "---------------------------------------------------------"
echo ""


##################################
## fio options for specific ZNS ##
##################################
BS=$(echo "${DEV_SECT_SIZE} * ${DEV_ZONE_SIZE}" | bc)
READ_ZONES=$(echo "${DEV_ZONES} - ${FINISH_SIZE}" | bc) # All but the fill zones
READ_IODEPTH=(1 2 4 8 16 32 64 128) 
READ_FLOW=(100 99 95 90 75 50) # 25)

echo "#########################################################"
echo "###################### BENCH  SETUP #####################"
echo "#########################################################"
echo "---------------------------------------------------------"
printf 'FINISH_ZONES (Empty zones for finish): %18s\n' "${FINISH_SIZE}"
echo "---------------------------------------------------------"
printf 'READ_ZONES (zones for read): %28s\n' "${READ_ZONES}"
echo "---------------------------------------------------------"
printf 'READ_IODEPTH: %43s\n' "${READ_IODEPTH[*]}"
echo "---------------------------------------------------------"
printf 'READ_RATE_FLOWS: %40s\n' "${READ_FLOW[*]}"
echo "---------------------------------------------------------"
echo ""

echo "Benchmarking ZNS Device Finish Rate Limit"
sudo nvme zns reset-zone /dev/${DEV} -a
sudo env "DEV=${DEV_CHAR}" "FINISH_SIZE=${FINISH_SIZE}" ${FIO} \
    --output-format=json \
    --output=data/bw.json \
    jobs/job-finish.fio
BW=$(cat data/bw.json | grep -i "bw_bytes" | awk 'FNR == 2 {print $3}' | sed 's/,//g')
echo "Found Sustainable BW for Finish Rate Limiting: ${BW} B/sec"

for read_iodepth in ${READ_IODEPTH[@]}; do
    for read_flow in ${READ_FLOW[@]}; do
        finish_flow=$((100 - ${read_flow}))
        echo ""
        echo "Benchmarking READ_IODEPTH ${read_iodepth}: <READ_FLOW ${read_flow} - FINISH_LIMIT ${finish_flow}>"
        sudo nvme zns reset-zone /dev/${DEV} -a

        if [[ ${finish_flow} -eq 0 ]]; then
            # With 0 finish flow we want to disable the concurrent finish workload
            CONCUR_READ_SIZE=$(echo "scale=0; ${READ_ZONES} / ${read_iodepth}" | bc)
            sudo env "DEV=${DEV_CHAR}" "CONCUR_READ_SIZE=${CONCUR_READ_SIZE}" "READ_IODEPTH=${read_iodepth}" \
                "FINISH_SIZE=${FINISH_SIZE}" "READ_SIZE=${READ_ZONES}" ${FIO} \
                    --output-format=json \
                    --output=data/data-read_iod_${read_iodepth}-rflow_${read_flow}.json \
                    jobs/job-read.fio
        else
            CONCUR_READ_SIZE=$(echo "scale=0; ${READ_ZONES} / ${read_iodepth}" | bc)
            finish_rate_limit=$(echo "scale=2; ${finish_flow} / 100  * ${BW}" | bc)

            # Read job has a ramp time because fio will directly issue 2 finishs and then realize it needs to rate limit, therefore we don't want to account this period in the read performance
            sudo env "DEV=${DEV_CHAR}" "CONCUR_READ_SIZE=${CONCUR_READ_SIZE}" "READ_IODEPTH=${read_iodepth}" \
                "FINISH_SIZE=${FINISH_SIZE}" "FINISH_LIMIT=${finish_rate_limit}" "READ_SIZE=${READ_ZONES}" \
                    ${FIO} \
                        --output-format=json \
                        --output=data/data-read_iod_${read_iodepth}-rflow_${read_flow}.json \
                        jobs/job.fio
        fi
    done
done

