#! /bin/bash

set -e

if [ $# != 1 ]; then
    echo "Usage: $0 <ZNS device (e.g., nvme0n2)>  $1 <zones to finish (e.g., 300)>"
    exit 1
fi
DEV=$1
FINISH_SIZE=$2

# Output
mkdir -p data

# Binaries
FIO="../../../../../tools/fio/fio"

# Device info
DEV_CHAR=$(echo ${DEV} | sed 's/vme/g/g')
DEV_SECT_SIZE=$(cat /sys/block/${DEV}/queue/hw_sector_size)
DEV_ZONE_SIZE_BLOCKS=$(cat /sys/block/${DEV}/queue/chunk_sectors)
DEV_ZONE_SIZE=$(echo "${DEV_ZONE_SIZE_BLOCKS} * 512" | bc)
DEV_ZONES=$(cat /sys/block/${DEV}/queue/nr_zones)

echo "#########################################################"
echo "####################### ZNS  SETUP ######################"
echo "#########################################################"
echo "---------------------------------------------------------"
printf 'DEV: %52s\n' "/dev/${DEV}"
echo "---------------------------------------------------------"
printf 'SECTOR_SIZE: %44s\n' "${DEV_SECT_SIZE}"
echo "---------------------------------------------------------"
printf 'ZONE_SIZE_BLOCKS: %39s\n' "${DEV_ZONE_SIZE_BLOCKS}"
echo "---------------------------------------------------------"
printf 'ZONE_SIZE_BYTES: %40s\n' "${DEV_ZONE_SIZE}"
echo "---------------------------------------------------------"
printf 'DEV_ZONES: %46s\n' "${DEV_ZONES}"
echo "---------------------------------------------------------"
echo ""


##################################
## fio options for specific ZNS ##
##################################
BS=$(echo "${DEV_SECT_SIZE} * ${DEV_ZONE_SIZE}" | bc)
# Use 300 finish zones as with ~1 finish/sec and at 50% rate limit we can do 1 finish every 2 seconds
# and benchmarks try to run for 10 minutes (10*60/2) = 300 and peak write bandwidth is 1.2GB/s = ~1 zone so within 10
# minutes we can fill (10*60) = 600 and we have a total of 904 zones
# FINISH_SIZE=300
WRITE_ZONES=$(echo "${DEV_ZONES} - ${FINISH_SIZE}" | bc) # All but the fill zones
# our setup only has 20 cores and we have a polling thread for each job
# therefore we max to 9 write jobs, as there is 1 concurrent trim job
# issuing zone finish with also its own polling thread
WRITE_IODEPTH=(1 2 3 4 5 6 7) 
WRITE_FLOW=(100 99 95 90 75 50) # 25)

echo "#########################################################"
echo "###################### BENCH  SETUP #####################"
echo "#########################################################"
echo "---------------------------------------------------------"
printf 'FINISH_ZONES (Empty zones for finish): %18s\n' "${FINISH_SIZE}"
echo "---------------------------------------------------------"
printf 'APPEND_ZONES (Empty zones for appends): %17s\n' "${WRITE_ZONES}"
echo "---------------------------------------------------------"
printf 'APPEND_IODEPTH: %41s\n' "${WRITE_IODEPTH[*]}"
echo "---------------------------------------------------------"
printf 'APPEND_RATE_FLOWS: %38s\n' "${WRITE_FLOW[*]}"
echo "---------------------------------------------------------"
echo ""

echo "Benchmarking ZNS Device Finish Rate Limit"
sudo nvme zns reset-zone /dev/${DEV} -a
sudo env "DEV=${DEV_CHAR}" "FINISH_SIZE=${FINISH_SIZE}" ${FIO} \
    --output-format=json \
    --output=data/bw.json \
    jobs/job-finish.fio
BW=$(cat data/bw.json | grep -i "bw_bytes" | awk 'FNR == 2 {print $3}' | sed 's/,//g')
echo "Found Sustainable BW for Finish Rate Limiting: ${BW} B/sec"

for write_iodepth in ${WRITE_IODEPTH[@]}; do
    for write_flow in ${WRITE_FLOW[@]}; do
        finish_flow=$((100 - ${write_flow}))
        echo ""
        echo "Benchmarking APPEND_IODEPTH ${write_iodepth}: <APPEND_FLOW ${write_flow} - FINISH_LIMIT ${finish_flow}>"
        sudo nvme zns reset-zone /dev/${DEV} -a

        if [[ ${finish_flow} -eq 0 ]]; then
            # With 0 finish flow we want to disable the concurrent finish workload
            sudo env "DEV=${DEV_CHAR}" "APPEND_SIZE=${WRITE_ZONES}" "APPEND_IODEPTH=${write_iodepth}" \
                ${FIO} \
                    --output-format=json \
                    --output=data/data-append_iod_${write_iodepth}-aflow_${write_flow}.json \
                    jobs/job-append.fio
        else
            finish_rate_limit=$(echo "scale=2; ${finish_flow} / 100  * ${BW}" | bc)
            sudo env "DEV=${DEV_CHAR}" "APPEND_SIZE=${WRITE_ZONES}" "APPEND_IODEPTH=${write_iodepth}" \
                "FINISH_SIZE=${FINISH_SIZE}" "FINISH_LIMIT=${finish_rate_limit}" ${FIO} \
                    --output-format=json \
                    --output=data/data-append_iod_${write_iodepth}-aflow_${write_flow}.json \
                    jobs/job.fio
        fi
    done
done

