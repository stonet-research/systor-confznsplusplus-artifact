#! /bin/bash

set -e

SCRIPT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
cd ${SCRIPT_DIR}
source ../common.sh

# Input
if [ $# != 1 ]; then
    echo "Usage: $0 <ZNS device (e.g., nvme0n2)>"
    exit 1
fi
DEV=$1

# Device info
get_device_info ${DEV}

##################################
## fio options for specific ZNS ##
##################################
CONCUR_FILL=4 # concurrent fill jobs to speedup filling
TRIM_IODEPTH=1 # concurrent trim jobs to find trim bw limit
# Use 70% of the zones for resets and 30% for writes
FILL_SIZE=$(echo "scale=0; ${DEV_ZONES} * 0.7" | bc | sed 's/\.[0-9]*//g')
WRITE_ZONES=$(echo "${DEV_ZONES} - ${FILL_SIZE}" | bc) # All but the fill zones
CONCUR_FILL_SIZE=$(echo "scale=0; ${FILL_SIZE} / ${CONCUR_FILL}" | bc)
# our setup only has 20 cores and we have a polling thread for each job
# therefore we max to 9 write jobs, as there is 1 concurrent trim job
# issuing zone resets with also its own polling thread
APPEND_IODEPTH=(1 2 3 4 5 6 7)

echo "#########################################################"
echo "###################### BENCH  SETUP #####################"
echo "#########################################################"
echo "---------------------------------------------------------"
printf 'TRIM_SIZE: %46s\n' "${BS}"
echo "---------------------------------------------------------"
printf 'TRIM_JOBS: %46s\n' "${TRIM_IODEPTH}"
echo "---------------------------------------------------------"
printf 'FILL_ZONES (Zones filled for resets): %19s\n' "${FILL_SIZE}"
echo "---------------------------------------------------------"
printf 'APPEND_ZONES (Empty zones for appends): %18s\n' "${WRITE_ZONES}"
echo "---------------------------------------------------------"
printf 'APPEND_IODEPTH: %42s\n' "${APPEND_IODEPTH[*]}"
echo "---------------------------------------------------------"
echo ""

for append_iodepth in ${APPEND_IODEPTH[@]}; do
    echo "Benchmarking APPEND_IODEPTH ${append_iodepth}"
    sudo nvme zns reset-zone /dev/${DEV_CHAR} -a

    sudo env "DEV=${DEV_CHAR}" "BS=${DEV_ZONE_SIZE}" "FILL_SIZE=${FILL_SIZE}" "APPEND_IODEPTH=${append_iodepth}" \
        "WRITE_SIZE=${WRITE_ZONES}" ${FIO} \
            --output-format=json \
            --output=${SCRIPT_DIR}/data/data-append_iod_${append_iodepth}.json \
            ${SCRIPT_DIR}/jobs/job.fio
done
