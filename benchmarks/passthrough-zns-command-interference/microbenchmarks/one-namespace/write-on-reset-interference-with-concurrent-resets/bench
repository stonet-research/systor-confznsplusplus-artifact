#! /bin/bash

set -e

SCRIPT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
cd ${SCRIPT_DIR}
source ../common.sh

if [ $# != 1 ]; then
    echo "Usage: $0 <ZNS device (e.g., nvme0n2)>"
    exit 1
fi
DEV=$1

# Device info
get_device_info ${DEV}

##################################
## fio options for specific ZNS ##
##################################
CONCUR_FILL=4 # concurrent fill jobs to speedup filling
CONCUR_WRITE=1 # concurrent jobs for write interference
# Use 90% of the zones for resets and 10% for writes
FILL_SIZE=$(echo "scale=0; ${DEV_ZONES} * 0.9" | bc | sed 's/\.[0-9]*//g')
WRITE_ZONES=$(echo "${DEV_ZONES} - ${FILL_SIZE}" | bc) # All but the fill zones
WRITE_SIZE=$(echo "scale=0; ${WRITE_ZONES} / ${CONCUR_FILL}" | bc)
CONCUR_FILL_SIZE=$(echo "scale=0; ${FILL_SIZE} / ${CONCUR_FILL}" | bc)
TRIM_IODEPTH=(1 2 3 4 5 6 7 8 9)
TRIM_FLOW=(100 99 95 90 75 50)

echo "#########################################################"
echo "###################### BENCH  SETUP #####################"
echo "#########################################################"
printf 'CONCUR_FILL_JOBS: %39s\n' "${CONCUR_FILL}"
echo "---------------------------------------------------------"
printf 'TRIM_SIZE: %46s\n' "${BS}"
echo "---------------------------------------------------------"
printf 'FILL_ZONES (Zones filled for resets): %19s\n' "${FILL_SIZE}"
echo "---------------------------------------------------------"
printf 'FILL_ZONES_PER_JOB: %37s\n' "${CONCUR_FILL_SIZE}"
echo "---------------------------------------------------------"
printf 'WRITE_ZONES (Empty zones for writes): %19s\n' "${WRITE_ZONES}"
echo "---------------------------------------------------------"
printf 'WRITE_ZONES_PER_JOB: %36s\n' "${WRITE_SIZE}"
echo "---------------------------------------------------------"
printf 'TRIM_NUMJOBS: %43s\n' "${TRIM_IODEPTH[*]}"
echo "---------------------------------------------------------"
printf 'TRIM_RATE_FLOWS: %40s\n' "${TRIM_FLOW[*]}"
echo "---------------------------------------------------------"
printf 'CONCUR_WRITE_JOBS: %38s\n' "${CONCUR_WRITE}"
echo "---------------------------------------------------------"
echo ""

echo "Benchmarking ZNS Device Write BW Rate Limit"
sudo nvme zns reset-zone /dev/${DEV} -a
sudo env "DEV=${DEV_CHAR}" "BS=${DEV_ZONE_SIZE}" "CONCUR_FILL_SIZE=${CONCUR_FILL_SIZE}" "CONCUR_FILL=${CONCUR_FILL}" \
    "FILL_SIZE=${FILL_SIZE}" ${FIO} \
        --output-format=json \
        --output=data/bw.json \
        ${SCRIPT_DIR}/jobs/job-bw.fio
BW=$(cat data/bw.json | grep -i "bw_bytes" | awk 'FNR == 2 {print $3}' | sed 's/,//g')
echo "Found Sustainable Max BW for Write Rate Limiting: ${BW} B/sec"

for trim_iodepth in ${TRIM_IODEPTH[@]}; do
    for trim_flow in ${TRIM_FLOW[@]}; do
        write_flow=$((100 - ${trim_flow}))
        echo ""
        echo "Benchmarking TRIM_IODEPTH ${trim_iodepth}: <TRIM_FLOW ${trim_flow} - WRITE_LIMIT ${write_flow}>"
        sudo nvme zns reset-zone /dev/${DEV_CHAR} -a

        if [[ ${write_flow} -eq 0 ]]; then
            # With 0 write flow we want to disable the concurrent write workload
            sudo env "DEV=${DEV_CHAR}" "BS=${DEV_ZONE_SIZE}" "CONCUR_FILL_SIZE=${CONCUR_FILL_SIZE}" \
                "CONCUR_FILL=${CONCUR_FILL}" "FILL_SIZE=${FILL_SIZE}" "TRIM_IODEPTH=${trim_iodepth}" \
                "WRITE_SIZE=0" ${FIO} \
                    --output-format=json \
                    --output=${SCRIPT_DIR}/data/data-trim_iod_${trim_iodepth}-tflow_${trim_flow}.json \
                    ${SCRIPT_DIR}/jobs/job-trim.fio
        else
            write_rate_limit=$(echo "scale=2; ${write_flow} / 100  * ${BW} / ${CONCUR_WRITE}" | bc)
            sudo env "DEV=${DEV_CHAR}" "BS=${DEV_ZONE_SIZE}" "CONCUR_FILL_SIZE=${CONCUR_FILL_SIZE}" \
                "CONCUR_FILL=${CONCUR_FILL}" "FILL_SIZE=${FILL_SIZE}" "TRIM_IODEPTH=${trim_iodepth}" \
                "WRITE_SIZE=${WRITE_SIZE}" "CONCUR_WRITE=${CONCUR_WRITE}" "WRITE_LIMIT=${write_rate_limit}" \
                ${FIO} \
                    --output-format=json \
                    --output=${SCRIPT_DIR}/data/data-trim_iod_${trim_iodepth}-tflow_${trim_flow}.json \
                    ${SCRIPT_DIR}/jobs/job.fio
        fi
    done
done
