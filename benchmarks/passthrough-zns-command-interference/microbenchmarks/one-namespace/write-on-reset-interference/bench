#! /bin/bash

set -e

SCRIPT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
cd ${SCRIPT_DIR}
source ../common.sh

if [ $# != 1 ]; then
    echo "Usage: $0 <ZNS device (e.g., nvme0n2)>"
    exit 1
fi
DEV=$1

# Device info
get_device_info ${DEV}

##################################
## fio options for specific ZNS ##
##################################
CONCUR_FILL=4 # concurrent fill jobs to speedup filling
TRIM_IODEPTH=1 # concurrent trim jobs to find trim bw limit
# Use 70% of the zones for resets and 30% for writes
FILL_SIZE=$(echo "scale=0; ${DEV_ZONES} * 0.7" | bc | sed 's/\.[0-9]*//g')
WRITE_ZONES=$(echo "${DEV_ZONES} - ${FILL_SIZE}" | bc) # All but the fill zones
CONCUR_FILL_SIZE=$(echo "scale=0; ${FILL_SIZE} / ${CONCUR_FILL}" | bc)
# our setup only has 20 cores and we have a polling thread for each job
# therefore we max to 9 write jobs, as there is 1 concurrent trim job
# issuing zone resets with also its own polling thread
WRITE_IODEPTH=(1 2 3 4 5 6 7)

echo "#########################################################"
echo "###################### BENCH  SETUP #####################"
echo "#########################################################"
echo "---------------------------------------------------------"
printf 'CONCUR_FILL_JOBS: %39s\n' "${CONCUR_FILL}"
echo "---------------------------------------------------------"
printf 'TRIM_SIZE: %46s\n' "${BS}"
echo "---------------------------------------------------------"
printf 'TRIM_JOBS: %46s\n' "${TRIM_IODEPTH}"
echo "---------------------------------------------------------"
printf 'FILL_ZONES (Zones filled for resets): %19s\n' "${FILL_SIZE}"
echo "---------------------------------------------------------"
printf 'FILL_ZONES_PER_JOB: %37s\n' "${CONCUR_FILL_SIZE}"
echo "---------------------------------------------------------"
printf 'WRITE_ZONES (Empty zones for writes): %19s\n' "${WRITE_ZONES}"
echo "---------------------------------------------------------"
printf 'WRITE_NUMJOBS: %42s\n' "${WRITE_IODEPTH[*]}"
echo "---------------------------------------------------------"
echo ""

baseline_reset ${DEV_CHAR} ${FILL_SIZE}

for write_iodepth in ${WRITE_IODEPTH[@]}; do
    WRITE_SIZE=$(echo "scale=0; ${WRITE_ZONES} / ${write_iodepth}" | bc)
    echo "Benchmarking WRITE_IODEPTH ${write_iodepth}"
    sudo nvme zns reset-zone /dev/${DEV_CHAR} -a

    CONCUR_FILL_SIZE=$(echo "scale=0; ${FILL_SIZE} / ${CONCUR_FILL}" | bc)
    sudo env "DEV=${DEV_CHAR}" "BS=${DEV_ZONE_SIZE}" "CONCUR_FILL_SIZE=${CONCUR_FILL_SIZE}" \
        "CONCUR_FILL=${CONCUR_FILL}" "FILL_SIZE=${FILL_SIZE}" "WRITE_IODEPTH=${write_iodepth}" \
        "WRITE_SIZE=${WRITE_SIZE}" ${FIO} \
            --output-format=json \
            --output=${SCRIPT_DIR}/data/data-write_iod_${write_iodepth}.json \
            ${SCRIPT_DIR}/jobs/job.fio
done
