#! /bin/bash

set -e

SCRIPT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
cd ${SCRIPT_DIR}
source ../common.sh

if [ $# != 1 ]; then
    echo "Usage: $0 <ZNS device (e.g., nvme0n2)>"
    exit 1
fi
DEV=$1

# Device info
get_device_info ${DEV}

##################################
## fio options for specific ZNS ##
##################################
CONCUR_FILL=4 # concurrent fill jobs to speedup filling
TRIM_IODEPTH=1 # concurrent trim jobs to find trim bw limit
# Use 70% of the zones for resets and 30% for writes
READ_ZONES=$(echo "scale=0; ${DEV_ZONES} * 0.3" | bc | sed 's/\.[0-9]*//g')
FILL_SIZE=${DEV_ZONES}
READ_OFFSET=$(echo "scale=0; ${DEV_ZONES} - ${READ_ZONES}" | bc)
READ_IODEPTH=(1 2 4 8 16 32 64 128)
READ_FLOW=(100 99 95 90 75 50)

echo "#########################################################"
echo "###################### BENCH  SETUP #####################"
echo "#########################################################"
echo "---------------------------------------------------------"
printf 'TRIM_SIZE: %46s\n' "${BS}"
echo "---------------------------------------------------------"
printf 'TRIM_JOBS: %46s\n' "${TRIM_IODEPTH}"
echo "---------------------------------------------------------"
printf 'FILL_ZONES (Zones filled for resets): %19s\n' "${FILL_SIZE}"
echo "---------------------------------------------------------"
printf 'READ_ZONES (Empty zones for writes): %20s\n' "${READ_ZONES}"
echo "---------------------------------------------------------"
printf 'READ_OFFSET: %44s\n' "${READ_OFFSET}"
echo "---------------------------------------------------------"
printf 'READ_NUMJOBS: %43s\n' "${READ_IODEPTH[*]}"
echo "---------------------------------------------------------"
printf 'READ_RATE_FLOWS: %40s\n' "${READ_FLOW[*]}"
echo "---------------------------------------------------------"
echo ""

baseline_reset ${DEV_CHAR} ${DEV_ZONES}

for read_iodepth in ${READ_IODEPTH[@]}; do
    for read_flow in ${READ_FLOW[@]}; do
        trim_flow=$((100 - ${read_flow}))
        READ_SIZE=$(echo "scale=0; ${READ_ZONES} / ${read_iodepth}" | bc)
        echo "Benchmarking READ_IODEPTH ${read_iodepth}: <READ_FLOW ${read_flow} - RESET_LIMIT ${trim_flow}>"
        sudo nvme zns reset-zone /dev/${DEV_CHAR} -a

        if [[ ${trim_flow} -eq 0 ]]; then
            sudo env "DEV=${DEV_CHAR}" "BS=${DEV_ZONE_SIZE}" "FILL_SIZE=${FILL_SIZE}" "READ_IODEPTH=${read_iodepth}" \
                "READ_OFFSET=${READ_OFFSET}" ${FIO} \
                    --output-format=json \
                    --output=${SCRIPT_DIR}/data/data-read_iod_${read_iodepth}-rflow_${read_flow}.json \
                    ${SCRIPT_DIR}/jobs/job-bw.fio
        else
            trim_rate_limit=$(echo "scale=2; ${trim_flow} / 100  * ${RESET_BW}" | bc)
            sudo env "DEV=${DEV_CHAR}" "BS=${DEV_ZONE_SIZE}" "FILL_SIZE=${FILL_SIZE}" "READ_IODEPTH=${read_iodepth}" \
                "READ_SIZE=${READ_SIZE}" "READ_OFFSET=${READ_OFFSET}" "RESET_LIMIT=${trim_rate_limit}" \
                ${FIO} \
                    --output-format=json \
                    --output=${SCRIPT_DIR}/data/data-read_iod_${read_iodepth}-rflow_${read_flow}.json \
                    ${SCRIPT_DIR}/jobs/job.fio
        fi
    done
done
