#! /bin/bash

set -e

# Check input
if [ $# != 1 ]; then
    echo "Usage: $0 <ZNS device (e.g., nvme0n2)>"
    exit 1
fi

# Set binaries
FIO="../../../../tools/fio/fio"

# Device information
DEV="$1"
DEV_SECT_SIZE=$(cat /sys/block/$1/queue/hw_sector_size)
DEV_ZONE_SIZE_BLOCKS=$(cat /sys/block/$1/queue/chunk_sectors)
DEV_ZONE_SIZE=$(echo "${DEV_ZONE_SIZE_BLOCKS} * 512" | bc)
DEV_ZONES=$(cat /sys/block/$1/queue/nr_zones)

CAP_SECTORS=$(sudo blkzone report -c 5 /dev/$1 | grep -oP '(?<=cap )[0-9xa-f]+' | head -1)
ZONE_CAP=$((${CAP_SECTORS} * 512))
WB_SIZE=$((2 * 1024 * 1024 * 1024))
DATA_FILE_OUT=zNEW-optimal-inter-${1}-out-zenfs-$(date +"%Y_%m_%d_%I_%M_%p").dat

echo "#########################################################"
echo "####################### ZNS  SETUP ######################"
echo "#########################################################"
echo "---------------------------------------------------------"
printf 'DEV: %52s\n' "/dev/${DEV}"
echo "---------------------------------------------------------"
printf 'SECTOR_SIZE: %44s\n' "${DEV_SECT_SIZE}"
echo "---------------------------------------------------------"
printf 'ZONE_SIZE_BLOCKS: %39s\n' "${DEV_ZONE_SIZE_BLOCKS}"
echo "---------------------------------------------------------"
printf 'ZONE_SIZE_BYTES: %40s\n' "${DEV_ZONE_SIZE}"
echo "---------------------------------------------------------"
printf 'DEV_ZONES: %46s\n' "${DEV_ZONES}"
echo "---------------------------------------------------------"
echo ""

## fio options for specific ZNS ##
##################################
FILL_SIZE=$(echo "scale=0; ${DEV_ZONES} * 0.9" | bc | sed 's/\.[0-9]*//g')
WRITE_ZONES=$(echo "${DEV_ZONES} - ${FILL_SIZE}" | bc) # All but the fill zones
CONCUR_WRITE_SIZE=$(echo "scale=0; ${WRITE_ZONES} / 2" | bc)

CONCUR_FILL=5 # concurrent fill jobs to speedup filling
CONCUR_FILL_SIZE=$(echo "scale=0; ${FILL_SIZE} / ${CONCUR_FILL}" | bc)

# Prepare
mkdir -p data
echo zinc | sudo tee /sys/block/$1/queue/scheduler
sudo nvme zns reset-zone /dev/$1 -a
# We test against 64ms steps
echo 64 | sudo tee /sys/block/$1/queue/iosched/reset_timer_interval
#  Zinc parameters to always ensure prio is hit
echo 0 | sudo tee /sys/block/$1/queue/iosched/pending_requests_threshold
echo 5000000 | sudo tee /sys/block/$1/queue/iosched/write_ratio

TRIES=(1 2 3)
PRIO_DEPTH=(0 1 2 3 4 5)
for try in ${TRIES[@]}; do
for prio_depth in ${PRIO_DEPTH[@]}; do
    # Set zinc depth
    echo ${prio_depth} | sudo tee /sys/block/$1/queue/iosched/max_priority

    # print bench
    sudo env "DEV=${DEV}" \
        "BS=${DEV_ZONE_SIZE}" \
        "CONCUR_FILL=${CONCUR_FILL}" \
        "CONCUR_FILL_SIZE=${CONCUR_FILL_SIZE}" \
        "FILL_SIZE=${FILL_SIZE}" \
        "WRITE_IODEPTH=${write_iodepth}" \
        "CONCUR_WRITE_SIZE=${CONCUR_WRITE_SIZE}" \
        "RESET_LIMIT=${trim_rate_limit}" \
        "LOG_NAME=./data/${try}_${prio_depth}_reset" \
            ${FIO} \
                --showcmd \
                --output-format=json \
                --output="data/nrun-job-${try}_${prio_depth}" \
                jobs/job.fio 
    # Reset state
    sudo nvme zns reset-zone /dev/$1 -a
    # run bench
    sudo env "DEV=${DEV}" \
        "BS=${DEV_ZONE_SIZE}" \
        "CONCUR_FILL=${CONCUR_FILL}" \
        "CONCUR_FILL_SIZE=${CONCUR_FILL_SIZE}" \
        "FILL_SIZE=${FILL_SIZE}" \
        "WRITE_IODEPTH=${write_iodepth}" \
        "CONCUR_WRITE_SIZE=${CONCUR_WRITE_SIZE}" \
        "RESET_LIMIT=${trim_rate_limit}" \
        "LOG_NAME=./data/${try}_${prio_depth}_reset" \
            ${FIO} \
                --output-format=json \
                --output=data/ndata-${try}-${prio_depth}.json \
                jobs/job.fio 
done
done
