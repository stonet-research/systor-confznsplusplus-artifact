#! /bin/bash

set -e

SCRIPT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
cd ${SCRIPT_DIR}
source ../common.sh

# Check input
if [ $# != 1 ]; then
    echo "Usage: $0 <ZNS device (e.g., nvme0n2)>"
    exit 1
fi
DEV="$1"

quit_if_zinc_not_enabled

# Device information
get_device_info ${DEV}

##################################
## fio options for specific ZNS ##
##################################
FILL_SIZE=$(echo "scale=0; ${DEV_ZONES} * 0.9" | bc | sed 's/\.[0-9]*//g')
WRITE_ZONES=$(echo "${DEV_ZONES} - ${FILL_SIZE}" | bc) # All but the fill zones
CONCUR_WRITE_SIZE=$(echo "scale=0; ${WRITE_ZONES} / 2" | bc)
CONCUR_FILL=5 # concurrent fill jobs to speedup filling
CONCUR_FILL_SIZE=$(echo "scale=0; ${FILL_SIZE} / ${CONCUR_FILL}" | bc)
TRIES=(1 2 3)
PRIO_DEPTH=(0 1 2 3 4 5)

# Prepare
mkdir -p data
echo zinc | sudo tee /sys/block/$1/queue/scheduler > /dev/null
sudo nvme zns reset-zone /dev/$1 -a
# We test against 64ms steps
echo 64 | sudo tee /sys/block/$1/queue/iosched/reset_epoch_interval > /dev/null
#  Zinc parameters to always ensure prio is hit
echo 0 | sudo tee /sys/block/$1/queue/iosched/reset_minimum_concurrency_treshold > /dev/null
echo 5000000 | sudo tee /sys/block/$1/queue/iosched/reset_command_tokens > /dev/null

for try in ${TRIES[@]}; do
    for prio_depth in ${PRIO_DEPTH[@]}; do
        # Set zinc depth
        echo ${prio_depth} | sudo tee /sys/block/$1/queue/iosched/reset_maximum_epoch_holds > /dev/null

        # print bench
        sudo env "DEV=${DEV}" \
            "BS=${DEV_ZONE_SIZE}" \
            "CONCUR_FILL=${CONCUR_FILL}" \
            "CONCUR_FILL_SIZE=${CONCUR_FILL_SIZE}" \
            "FILL_SIZE=${FILL_SIZE}" \
            "WRITE_IODEPTH=${write_iodepth}" \
            "CONCUR_WRITE_SIZE=${CONCUR_WRITE_SIZE}" \
            "RESET_LIMIT=${trim_rate_limit}" \
            "LOG_NAME=${SCRIPT_DIR}/data/${try}_${prio_depth}_reset" \
                ${FIO} \
                    --showcmd \
                    --output-format=json \
                    --output="${SCRIPT_DIR}/data/nrun-job-${try}_${prio_depth}" \
                    ${SCRIPT_DIR}/jobs/job.fio 
        # Reset state
        sudo nvme zns reset-zone /dev/$1 -a
        # run bench
        sudo env "DEV=${DEV}" \
            "BS=${DEV_ZONE_SIZE}" \
            "CONCUR_FILL=${CONCUR_FILL}" \
            "CONCUR_FILL_SIZE=${CONCUR_FILL_SIZE}" \
            "FILL_SIZE=${FILL_SIZE}" \
            "WRITE_IODEPTH=${write_iodepth}" \
            "CONCUR_WRITE_SIZE=${CONCUR_WRITE_SIZE}" \
            "RESET_LIMIT=${trim_rate_limit}" \
            "LOG_NAME=${SCRIPT_DIR}/data/${try}_${prio_depth}_reset" \
                ${FIO} \
                    --output-format=json \
                    --output=${SCRIPT_DIR}/data/ndata-${try}-${prio_depth}.json \
                    ${SCRIPT_DIR}/jobs/job.fio 
    done
done
