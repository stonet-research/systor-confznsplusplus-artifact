#! /bin/bash

set -e

SCRIPT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
cd ${SCRIPT_DIR}
source ../common.sh

# Check input
if [ $# != 2 ]; then
    echo "Usage: $0 <ZNS device (e.g., nvme0n2)> num"
    exit 1
fi
DEV=$1

quit_if_zinc_not_enabled

# Device information
get_device_info ${DEV}

BLUE='\033[1;34m'
CLOSE='\033[0m'
RED='\033[1;31m'
GREEN=$'\033[1;32m'

##################################
## fio options for specific ZNS ##
##################################
BS=$(echo "${DEV_SECT_SIZE} * ${DEV_ZONE_SIZE}" | bc)
TRIM_IODEPTH=1 # concurrent trim jobs to find trim bw limit
# Use 90% of the zones for resets and 10% for writes
FILL_SIZE=$(echo "scale=0; ${DEV_ZONES} * 0.9" | bc | sed 's/\.[0-9]*//g')
WRITE_ZONES=$(echo "${DEV_ZONES} - ${FILL_SIZE}" | bc) # All but the fill zones
WRITE_IODEPTH=(1 7)

echo "#########################################################"
echo "###################### BENCH  SETUP #####################"
echo "#########################################################"
echo "---------------------------------------------------------"
printf 'TRIM_SIZE: %46s\n' "${BS}"
echo "---------------------------------------------------------"
printf 'FILL_ZONES (Zones filled for resets): %19s\n' "${FILL_SIZE}"
echo "---------------------------------------------------------"
printf 'WRITE_ZONES (Empty zones for writes): %19s\n' "${WRITE_ZONES}"
echo "---------------------------------------------------------"
printf 'WRITE_NUMJOBS: %42s\n' "${WRITE_IODEPTH[*]}"
echo "---------------------------------------------------------"
echo ""

########################################
## Identify mq Reset Max. Performance ##
########################################
echo -e ""${GREEN}"Benchmarking ZNS Device Reset Rate Limit"${CLOSE}""
sudo nvme zns reset-zone /dev/${DEV} -a
echo mq-deadline | sudo tee /sys/block/${DEV}/queue/scheduler >> /dev/null
sudo env "DEV=$1" "BS=${DEV_ZONE_SIZE}" "FILL_SIZE=${DEV_ZONES}" "TRIM_IODEPTH=${TRIM_IODEPTH}" \
    ${FIO} \
        --output-format=json \
        --output=data/bw.json \
        ${SCRIPT_DIR}/jobs/job-trim.fio
BW=$(cat ${SCRIPT_DIR}/data/bw.json | grep -i "bw_bytes" | awk 'FNR == 6 {print $3}' | sed 's/,//g')
echo "Found Sustainable BW for Reset Rate Limiting: ${BW} B/sec"

###########################################################################################
## Identify Reset Performance Baseline at 50% reset rate limit without concurrent writes ##
###########################################################################################

echo ""
echo -e ""${GREEN}"Baseline Benchmarking 50% Reset Rate Limit Performance"${CLOSE}""
trim_rate_limit=$(echo "scale=2; 50 / 100  * ${BW}" | bc) 
sudo nvme zns reset-zone /dev/$1 -a
# Not using ZINC for the baseline as it would hold resets and we want the best case reset performance, hence none scheduler is used
echo none | sudo tee /sys/block/$1/queue/scheduler >> /dev/null

sudo env "DEV=$1" "BS=${DEV_ZONE_SIZE}" \
    "FILL_SIZE=${FILL_SIZE}" \
    "RESET_LIMIT=${trim_rate_limit}" ${FIO} \
        --output-format=json \
        --output=${SCRIPT_DIR}/data/FINDAT-write_iod_${write_iodepth}-wflow_100-mq_deadline-$2.json \
            ${SCRIPT_DIR}/jobs/job-reset-baseline.fio 


############################################################
## Identify mq-deadline Write Performance - (100% writes) ##
############################################################
for write_iodepth in ${WRITE_IODEPTH[@]}; do
    WRITE_SIZE=$(echo "scale=0; ${WRITE_ZONES} / ${write_iodepth}" | bc)
    echo -e ""${BLUE}"Baseline Benchmarking Write Performance with 0% Reset Interference: \
        WRITE_JOBS ${write_iodepth} - mq-deadline"${CLOSE}""
    sudo nvme zns reset-zone /dev/${DEV} -a
    echo mq-deadline | sudo tee /sys/block/${DEV}/queue/scheduler >> /dev/null
    sudo env "DEV=$1" "FILL_SIZE=${FILL_SIZE}" \
        "WRITE_IODEPTH=${write_iodepth}" ${FIO} \
            --output-format=json \
            --output=${SCRIPT_DIR}/data/FINDAT-write_iod_${write_iodepth}-wflow_100-mq_deadline-$2.json \
                ${SCRIPT_DIR}/jobs/job-bw.fio
done

###########################################################
## Identify mq-deadline Write Performance - (50% writes) ##
###########################################################
for write_iodepth in ${WRITE_IODEPTH[@]}; do
    WRITE_SIZE=$(echo "scale=0; ${WRITE_ZONES} / ${write_iodepth}" | bc)
    echo -e ""${BLUE}"Benchmarking 50% Reset Limit WRITE_JOBS ${write_iodepth} - mq-deadline"${CLOSE}""
    sudo nvme zns reset-zone /dev/${DEV} -a
    echo mq-deadline | sudo tee /sys/block/${DEV}/queue/scheduler >> /dev/null
    trim_rate_limit=$(echo "scale=2; 50 / 100  * ${BW}" | bc)
    sudo env "DEV=$1" "BS=${DEV_ZONE_SIZE}" "FILL_SIZE=${FILL_SIZE}" \
        "WRITE_IODEPTH=${write_iodepth}" \
        "WRITE_SIZE=${WRITE_SIZE}" \
        "RESET_LIMIT=${trim_rate_limit}" ${FIO} \
            --output-format=json \
            --output=${SCRIPT_DIR}/data/FINDAT-write_iod_${write_iodepth}-wflow_50-mq_deadline-$2.json \
                ${SCRIPT_DIR}/jobs/job.fio
done

#####################################################
## Identify zinc Write Performance - (100% writes) ##
#####################################################
for write_iodepth in ${WRITE_IODEPTH[@]}; do
    WRITE_SIZE=$(echo "scale=0; ${WRITE_ZONES} / ${write_iodepth}" | bc)
    echo -e ""${BLUE}"Baseline Benchmarking Write Performance with 0% Reset Interference: \
        WRITE_JOBS ${write_iodepth} - zinc"${CLOSE}""
    sudo nvme zns reset-zone /dev/${DEV} -a
    echo zinc | sudo tee /sys/block/${DEV}/queue/scheduler >> /dev/null
    echo 3 | sudo tee /sys/block/${DEV}/queue/iosched/max_priority
    echo 4 | sudo tee /sys/block/${DEV}/queue/iosched/pending_requests_threshold
    echo 64 | sudo tee /sys/block/${DEV}/queue/iosched/reset_timer_interval
    echo 20000 | sudo tee /sys/block/${DEV}/queue/iosched/write_ratio
    sudo env "DEV=$1" "FILL_SIZE=${FILL_SIZE}" \
        "WRITE_IODEPTH=${write_iodepth}" ${FIO} \
            --output-format=json \
            --output=${SCRIPT_DIR}/data/FINDAT-write_iod_${write_iodepth}-wflow_100-zinc-$2.json \
                ${SCRIPT_DIR}/jobs/job-bw.fio
done

####################################################
## Identify zinc Write Performance - (50% writes) ##
####################################################
for write_iodepth in ${WRITE_IODEPTH[@]}; do
    WRITE_SIZE=$(echo "scale=0; ${WRITE_ZONES} / ${write_iodepth}" | bc)
    echo -e ""${BLUE}"Benchmarking 50% Reset Limit WRITE_JOBS ${write_iodepth} - zinc"${CLOSE}""
    sudo nvme zns reset-zone /dev/${DEV} -a
    echo zinc | sudo tee /sys/block/${DEV}/queue/scheduler >> /dev/null
    echo 3 | sudo tee /sys/block/${DEV}/queue/iosched/max_priority
    echo 4 | sudo tee /sys/block/${DEV}/queue/iosched/pending_requests_threshold
    echo 64 | sudo tee /sys/block/${DEV}/queue/iosched/reset_timer_interval
    echo 20000 | sudo tee /sys/block/${DEV}/queue/iosched/write_ratio
    trim_rate_limit=$(echo "scale=2; 50 / 100  * ${BW}" | bc)
    sudo env "DEV=$1" "BS=${DEV_ZONE_SIZE}" "FILL_SIZE=${FILL_SIZE}" \
        "WRITE_IODEPTH=${write_iodepth}" \
        "WRITE_SIZE=${WRITE_SIZE}" \
        "RESET_LIMIT=${trim_rate_limit}" ${FIO} \
            --output-format=json \
            --output=${SCRIPT_DIR}/data/FINDAT-write_iod_${write_iodepth}-wflow_50-zinc-$2.json \
                ${SCRIPT_DIR}/jobs/jobs/job.fio
done
