#! /bin/bash

set -e

SCRIPT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
cd ${SCRIPT_DIR}
source ../common.sh

# Validate input
if [ $# != 1 ]; then
    echo "Usage: $0 <ZNS device (e.g., nvme0n2)>"
    exit 1
fi
DEV=$1

# ZNS vars
get_device_info ${DEV}

##################################
## fio options for specific ZNS ##
##################################
BS=$(echo "${DEV_SECT_SIZE} * ${DEV_ZONE_SIZE}" | bc)
TRIM_IODEPTH=1 # concurrent trim jobs to find trim bw limit
# zenfs uses the first 100 zones
TRIM_SIZE=$(echo "scale=0; ${DEV_ZONES} - 100" | bc)
FILL_SIZE=$(echo "scale=0; ${TRIM_SIZE} - 300" | bc) # fill is only the last 100 empty zones
CAP_SECTORS=$(sudo blkzone report -c 5 /dev/$1 | grep -oP '(?<=cap )[0-9xa-f]+' | head -1)
ZONE_CAP=$((${CAP_SECTORS} * 512))
WB_SIZE=$(( 2 * 1024 * 1024 * 1024))

## Create ZenFS
echo mq-deadline | sudo tee /sys/block/${DEV}/queue/scheduler
sudo nvme zns reset-zone /dev/${DEV} -a
sudo rm -rf /tmp/aux
sudo rm -rf ${SCRIPT_DIR}/data/zenfs_data.log
sudo ${ZENFS} mkfs \
    --zbd=${DEV} \
    --aux_path=/tmp/aux \
    --force

echo "Running device prefill portion"
sudo env "DEV=${DEV}" ${FIO} \
    --output-format=json \
    --output=${SCRIPT_DIR}/data/fio-fill.json \
        ${SCRIPT_DIR}/jobs/job-prefill.fio

(sudo ${DBBENCH} \
    --fs_uri=zenfs://dev:${DEV} \
    --benchmarks=fillrandom \
    --num=120000000 \
    --compression_type=none \
    --value_size=4000 \
    --key_size=16 \
    --target_file_size_base=$(($ZONE_CAP * 2 * 95 / 100)) \
    --use_direct_io_for_flush_and_compaction \
    --max_bytes_for_level_multiplier=4 \
    --max_background_jobs=8 \
    --use_direct_reads \
    --write_buffer_size=${WB_SIZE} \
    --seed=42 \
    --use_existing_db=0 \
    --statistics=1 \
    --stats_per_interval=1 \
    --stats_interval_seconds=1 \
    --report_interval_seconds=1 \
    --histogram=1 &> ${SCRIPT_DIR}/data/zenfs_data.log) &

sudo env "DEV=${DEV}" "BS=${DEV_ZONE_SIZE}" "TRIM_SIZE=${TRIM_SIZE}" "FILL_SIZE=${FILL_SIZE}" \
    ${FIO} \
        --output-format=json \
        --output=${SCRIPT_DIR}/data/fio.json \
            ${SCRIPT_DIR}/jobs/job.fio

# After completing interference let rocksdb get back to usual performance
sleep 30
sudo pkill -P $$
