#! /bin/bash

set -e

# Verify input
if [ $# != 4 ]; then
    echo "Usage: $0 <ZNS device (e.g., nvme0n2)> <ZNS device (e.g., nvme0n3)> <ZNS device (e.g., nvme0n4)> with_reset"
    exit 1
fi

# Output
DATA_FILE_OUT=${1}-out-f2fs-$(date +"%Y_%m_%d_%I_%M_%p").dat

# Binaries
DBBENCH="../../../../tools/rocksdb/db_bench"
ZENFS="../../../../tools/rocksdb/plugin/zenfs/util/zenfs"
FIO="../../../../tools/fio/fio"
NULLBLK="../../../../util/nullblk_create"

# Device info
DEV_SECT_SIZE=$(cat /sys/block/$1/queue/hw_sector_size)
DEV_ZONE_SIZE_BLOCKS=$(cat /sys/block/$1/queue/chunk_sectors)
DEV_ZONE_SIZE=$(echo "${DEV_ZONE_SIZE_BLOCKS} * 512" | bc)
DEV_ZONES=$(cat /sys/block/$1/queue/nr_zones)

CAP_SECTORS=$(sudo blkzone report -c 5 /dev/$1 | grep -oP '(?<=cap )[0-9xa-f]+' | head -1)
ZONE_CAP=$((${CAP_SECTORS} * 512))
WB_SIZE=$((2 * 1024 * 1024 * 1024))

echo "#########################################################"
echo "####################### ZNS  SETUP ######################"
echo "#########################################################"
echo "---------------------------------------------------------"
printf 'DEV: %52s\n' "/dev/${DEV}"
echo "---------------------------------------------------------"
printf 'SECTOR_SIZE: %44s\n' "${DEV_SECT_SIZE}"
echo "---------------------------------------------------------"
printf 'ZONE_SIZE_BLOCKS: %39s\n' "${DEV_ZONE_SIZE_BLOCKS}"
echo "---------------------------------------------------------"
printf 'ZONE_SIZE_BYTES: %40s\n' "${DEV_ZONE_SIZE}"
echo "---------------------------------------------------------"
printf 'DEV_ZONES: %46s\n' "${DEV_ZONES}"
echo "---------------------------------------------------------"
echo ""

# Prepare
mkdir -p data
echo mq-deadline | sudo tee /sys/block/$1/queue/scheduler
sudo nvme zns reset-zone /dev/$1 -a
sudo nvme zns reset-zone /dev/$2 -a
sudo nvme zns reset-zone /dev/$3 -a

# Get bandwidth of trim from NVMe3
echo "Benchmarking ZNS Device Reset Rate Limit"
echo "GOT BANDWIDTH"
BW=$(cat data/bw.json | grep -i "bw_bytes" | awk 'FNR == 6 {print $3}' | sed 's/,//g')
echo "Found Sustainable BW for Reset Rate Limiting: ${BW} B/sec"

# Fill namespace 3
if [ "$4" -eq "1" ]; then
    sudo env "DEV=$3" "BS=${DEV_ZONE_SIZE}" "FILL_SIZE=700" ${FIO} \
        --output-format=json \
        --output=data/fill.json \
            jobs/fill.fio
    echo "FILL done"
fi

## Make ZenFS 
DEV=$(sudo ${NULLBLK} 4096 7168)  # TODO: remove hardcode
export DEV
sudo env "PATH=${PATH}" mkfs.f2fs -f -m -c /dev/${1} /dev/${DEV}
sudo mkdir -p /mnt/bench-f2fs
sudo mount -t f2fs /dev/${DEV} /mnt/bench-f2fs
sleep 20

# Spawn concurrent reset/write workload
trim_rate_limit=$(echo "scale=2; 50 / 100  * ${BW}" | bc)

if [ "$4" -eq "1" ]; then
    sudo env "DEVB=$2" "DEVC=$3" "BS=${DEV_ZONE_SIZE}" "RESET_LIMIT=${trim_rate_limit}"  ${FIO} \
         --output-format=json \
         --output=data/conc-f2fs.json \
            jobs/concurrent-reset-write-intererference.fio &
else
    sudo env "DEVB=$2" "DEVC=$3" "BS=${DEV_ZONE_SIZE}" "RESET_LIMIT=${trim_rate_limit}"  ${FIO} \
        --output-format=json \
        --output=data/conc-f2fs.json \
            jobs/concurrent-write-intererference.fio &
fi
echo "Spawned dettached fio"

# Run RocksDB for 30 seconds
sudo ${DBBENCH} \
    --db=/mnt/bench-f2fs/db0 --wal_dir=/mnt/bench-f2fs/wal0 \
    --benchmarks=fillrandom \
    --use_existing_db=0 \
    --compression_type=none \
    --value_size=4000 \
    --key_size=16 \
    --target_file_size_base=$(($ZONE_CAP * 2 * 65 / 100)) \
    --use_direct_io_for_flush_and_compaction \
    --max_bytes_for_level_multiplier=4 \
    --max_background_jobs=8 \
    --use_direct_reads \
    --write_buffer_size=${WB_SIZE} \
    --seed=42 \
    --histogram=1 > data/${DATA_FILE_OUT} \
    --duration=30

echo "DONE with benchmark"
