#! /bin/bash

set -e

# Verify input
if [ $# != 5 ]; then
    echo "Usage: $0 <ZNS device (e.g., nvme0n2)> write_offset_zones reset_offset_zones with_reset sched"
    exit 1
fi

# Output

# Binaries
DBBENCH="../../../../../tools/rocksdb/db_bench"
ZENFS="../../../../../tools/rocksdb/plugin/zenfs/util/zenfs"
FIO="../../../../../tools/fio/fio"
NULLBLK="../../../../../util/nullblk_create"

# Device info
DEV_SECT_SIZE=$(cat /sys/block/$1/queue/hw_sector_size)
DEV_ZONE_SIZE_BLOCKS=$(cat /sys/block/$1/queue/chunk_sectors)
DEV_ZONE_SIZE=$(echo "${DEV_ZONE_SIZE_BLOCKS} * 512" | bc)
DEV_ZONES=$(cat /sys/block/$1/queue/nr_zones)

CAP_SECTORS=$(sudo blkzone report -c 5 /dev/$1 | grep -oP '(?<=cap )[0-9xa-f]+' | head -1)
ZONE_CAP=$((${CAP_SECTORS} * 512))
WB_SIZE=$((2 * 1024 * 1024 * 1024))
DATA_FILE_OUT=out-${1}-out-zenfs-$(date +"%Y_%m_%d_%I_%M_%p").dat

echo "#########################################################"
echo "####################### ZNS  SETUP ######################"
echo "#########################################################"
echo "---------------------------------------------------------"
printf 'DEV: %52s\n' "/dev/${DEV}"
echo "---------------------------------------------------------"
printf 'SECTOR_SIZE: %44s\n' "${DEV_SECT_SIZE}"
echo "---------------------------------------------------------"
printf 'ZONE_SIZE_BLOCKS: %39s\n' "${DEV_ZONE_SIZE_BLOCKS}"
echo "---------------------------------------------------------"
printf 'ZONE_SIZE_BYTES: %40s\n' "${DEV_ZONE_SIZE}"
echo "---------------------------------------------------------"
printf 'DEV_ZONES: %46s\n' "${DEV_ZONES}"
echo "---------------------------------------------------------"
echo ""

# Prepare scheduler
mkdir -p data
echo $5 | sudo tee /sys/block/$1/queue/scheduler
sudo nvme zns reset-zone /dev/$1 -a
case "$5" in
    *zinc*)
        # Optimal configuration
        echo 3 | sudo tee /sys/block/$1/queue/iosched/max_priority
        echo 4 | sudo tee /sys/block/$1/queue/iosched/pending_requests_threshold
        echo 64 | sudo tee /sys/block/$1/queue/iosched/reset_timer_interval
        echo 20000 | sudo tee /sys/block/$1/queue/iosched/write_ratio
        echo "iosched: zinc"
    ;;
    *) 
        # $5="mq-deadline"; 
        echo "iosched: mq-deadline"
    ;;
esac

# Get reset bandwidth of trim from disk
echo "Benchmarking ZNS Device Reset Rate Limit"
sudo env "DEV=$1" "BS=${DEV_ZONE_SIZE}" "FILL_SIZE=${DEV_ZONES}" "TRIM_IODEPTH=1" ${FIO} \
     --output-format=json \
     --output=data/bw.json \
         jobs/job-trim.fio
echo "GOT BANDWIDTH"
BW=$(cat data/bw.json | grep -i "bw_bytes" | awk 'FNR == 6 {print $3}' | sed 's/,//g')
echo "Found Sustainable BW for Reset Rate Limiting: ${BW} B/sec"

## Make ZenFS 
sudo nvme zns reset-zone /dev/$1 -a
sudo rm -rf /tmp/aux
sudo rm -rf data/zenfs_data.log
sudo ${ZENFS} mkfs \
    --zbd=$1 \
    --aux_path=/tmp/aux \
    --force \
    --enable_gc

# Fill namespace 3
if [ "$4" -eq "1" ]; then
    sudo env "DEV=$1" "BS=${DEV_ZONE_SIZE}" "FILL_SIZE=700" "OFFSET_ZONES=$3" ${FIO} \
        --output-format=json \
        --output=data/fill.json \
            jobs/fill.fio
    echo "FILL done"
fi

# Spawn concurrent reset/write workload
trim_rate_limit=$(echo "scale=2; 50 / 100  * ${BW}" | bc)
echo "Reset max=${BW}, rate_limit=${trim_rate_limit}"
if [ "$4" -eq "1" ]; then
    sudo env "DEV=$1" \
        "OFFSET_ZONES_B=$2" \
        "OFFSET_ZONES_C=$3" \
        "BS=${DEV_ZONE_SIZE}" \
        "RESET_LIMIT=${trim_rate_limit}" ${FIO} \
            --output-format=json \
            --output=data/conc-zenfs-intererference-$(date +"%Y_%m_%d_%I_%M_%p").json \
                jobs/concurrent-reset-write-intererference.fio &
    sidejob=$!
else
    sudo env "DEV=$1" \
        "OFFSET_ZONES_B=$2" \
        "OFFSET_ZONES_C=$3" \
        "BS=${DEV_ZONE_SIZE}" \
        "RESET_LIMIT=${trim_rate_limit}" ${FIO} \
            --output-format=json \
            --output=data/conc-zenfs-no-intererference-$(date +"%Y_%m_%d_%I_%M_%p").json \
                jobs/concurrent-write-intererference.fio &
    sidejob=$!
fi
echo "Spawned dettached fio"

# Run RocksDB for 30 seconds
sudo ${DBBENCH} \
    --fs_uri=zenfs://dev:$1 \
    --benchmarks=fillrandom \
    --use_existing_db=0 \
    --compression_type=none \
    --value_size=4000 \
    --key_size=16 \
    --target_file_size_base=$(($ZONE_CAP * 2 * 65 / 100)) \
    --use_direct_io_for_flush_and_compaction \
    --max_bytes_for_level_multiplier=4 \
    --max_background_jobs=8 \
    --use_direct_reads \
    --write_buffer_size=${WB_SIZE} \
    --seed=42 \
    --histogram=1 > data/${DATA_FILE_OUT} \
    --duration=30

wait $sidejob
echo "DONE with benchmark"
