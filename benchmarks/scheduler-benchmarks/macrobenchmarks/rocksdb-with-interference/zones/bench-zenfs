#! /bin/bash

set -e

SCRIPT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
cd ${SCRIPT_DIR}
source ../../common.sh

# Verify input
if [ $# != 5 ]; then
    echo "Usage: $0 <ZNS device (e.g., nvme0n2)> write_offset_zones reset_offset_zones with_reset sched"
    exit 1
fi
DEV=$1
WRITE_OFFSET_ZONES=$2
RESET_OFFSET_ZONES=$3
WITH_RESET=$4
SCHEDULER=$5

# Output
DATA_FILE_OUT=out-${DEV}-out-zenfs-$(date +"%Y_%m_%d_%I_%M_%p").dat

# ZNS vars
get_device_info ${DEV}
# RocksDB vars
get_default_rocksdb_vars ${DEV}

# Prepare scheduler
mkdir -p data
echo ${SCHEDULER} | sudo tee /sys/block/${DEV}/queue/scheduler  > /dev/null
sudo nvme zns reset-zone /dev/${DEV} -a
case "${SCHEDULER}" in
    *zinc*)
        # Optimal configuration
        echo 3 | sudo tee /sys/block/${DEV}/queue/iosched/reset_maximum_epoch_holds > /dev/null
        echo 4 | sudo tee /sys/block/${DEV}/queue/iosched/reset_minimum_concurrency_treshold  > /dev/null
        echo 64 | sudo tee /sys/block/${DEV}/queue/iosched/reset_epoch_interval  > /dev/null
        echo 20000 | sudo tee /sys/block/${DEV}/queue/iosched/reset_command_tokens  > /dev/null
        echo "iosched: zinc"
    ;;
    *) 
        # $5="mq-deadline"; 
        echo "iosched: mq-deadline"
    ;;
esac

# Get reset bandwidth of trim from disk
echo "Benchmarking ZNS Device Reset Rate Limit"
sudo env "DEV=${DEV}" "BS=${DEV_ZONE_SIZE}" "FILL_SIZE=${DEV_ZONES}" "TRIM_IODEPTH=1" ${FIO} \
     --output-format=json \
     --output=${SCRIPT_DIR}/data/bw.json \
         ${SCRIPT_DIR}/jobs/job-trim.fio
echo "GOT BANDWIDTH"
BW=$(cat ${SCRIPT_DIR}/data/bw.json | grep -i "bw_bytes" | awk 'FNR == 6 {print $3}' | sed 's/,//g')
echo "Found Sustainable BW for Reset Rate Limiting: ${BW} B/sec"

## Make ZenFS 
sudo nvme zns reset-zone /dev/${DEV} -a
sudo rm -rf /tmp/aux
sudo rm -rf ${SCRIPT_DIR}/data/zenfs_data.log
sudo ${ZENFS} mkfs \
    --zbd=${ZENFS} \
    --aux_path=/tmp/aux \
    --force \
    --enable_gc

# Fill namespace 3
if [ "${WITH_RESET}" -eq "1" ]; then
    sudo env "DEV=$1" "BS=${DEV_ZONE_SIZE}" "FILL_SIZE=700" "OFFSET_ZONES=${RESET_OFFSET_ZONES}" ${FIO} \
        --output-format=json \
        --output=${SCRIPT_DIR}/data/fill.json \
            ${SCRIPT_DIR}/jobs/fill.fio
    echo "FILL done"
fi

# Spawn concurrent reset/write workload
trim_rate_limit=$(echo "scale=2; 50 / 100  * ${BW}" | bc)
echo "Reset max=${BW}, rate_limit=${trim_rate_limit}"
if [ "${WITH_RESET}" -eq "1" ]; then
    sudo env "DEV=${DEV}" \
        "OFFSET_ZONES_B=${WRITE_OFFSET_ZONES}" \
        "OFFSET_ZONES_C=${RESET_OFFSET_ZONES}" \
        "BS=${DEV_ZONE_SIZE}" \
        "RESET_LIMIT=${trim_rate_limit}" ${FIO} \
            --output-format=json \
            --output=${SCRIPT_DIR}/data/conc-zenfs-intererference-$(date +"%Y_%m_%d_%I_%M_%p").json \
                ${SCRIPT_DIR}/jobs/concurrent-reset-write-intererference.fio &
    sidejob=$!
else
    sudo env "DEV=$1" \
        "OFFSET_ZONES_B=${WRITE_OFFSET_ZONES}" \
        "OFFSET_ZONES_C=${RESET_OFFSET_ZONES}" \
        "BS=${DEV_ZONE_SIZE}" \
        "RESET_LIMIT=${trim_rate_limit}" ${FIO} \
            --output-format=json \
            --output=${SCRIPT_DIR}/data/conc-zenfs-no-intererference-$(date +"%Y_%m_%d_%I_%M_%p").json \
                ${SCRIPT_DIR}/jobs/concurrent-write-intererference.fio &
    sidejob=$!
fi
echo "Spawned dettached fio"

# Run RocksDB for 30 seconds
sudo ${DBBENCH} \
    --fs_uri=zenfs://dev:${DEV} \
    --benchmarks=fillrandom \
    --use_existing_db=0 \
    --compression_type=none \
    --value_size=4000 \
    --key_size=16 \
    --target_file_size_base=$((${ZONE_CAP} * 2 * 65 / 100)) \
    --use_direct_io_for_flush_and_compaction \
    --max_bytes_for_level_multiplier=4 \
    --max_background_jobs=8 \
    --use_direct_reads \
    --write_buffer_size=${WB_SIZE} \
    --seed=42 \
    --histogram=1 \
    --duration=30 > ${SCRIPT_DIR}/data/${DATA_FILE_OUT}

wait $sidejob
echo "DONE with benchmark"
