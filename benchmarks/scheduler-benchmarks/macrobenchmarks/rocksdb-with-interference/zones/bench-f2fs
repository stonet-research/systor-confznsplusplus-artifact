#! /bin/bash

set -e

SCRIPT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
cd ${SCRIPT_DIR}
source ../../common.sh

# Verify input
if [ $# != 4 ]; then
    echo "Usage: $0 <ZNS device (e.g., nvme0n2)>  write_offset_zones reset_offset_zones with_reset"
    exit 1
fi
DEV=$1
WRITE_OFFSET_ZONES=$2
RESET_OFFSET_ZONES=$3
WITH_RESET=$4

# Output
DATA_FILE_OUT=${DEV}-out-f2fs-$(date +"%Y_%m_%d_%I_%M_%p").dat

# ZNS vars
get_device_info ${DEV}
# RocksDB vars
get_default_rocksdb_vars ${DEV}

# Prepare
echo mq-deadline | sudo tee /sys/block/${DEV}/queue/scheduler
sudo nvme zns reset-zone /dev/${DEV} -a

# Get bandwidth of trim from NVMe3
echo "Benchmarking ZNS Device Reset Rate Limit"
sudo env "DEV=${DEV}" "BS=${DEV_ZONE_SIZE}" "FILL_SIZE=${DEV_ZONES}" "TRIM_IODEPTH=${TRIM_IODEPTH}" ${FIO} \
    --output-format=json \
    --output=${SCRIPT_DIR}/data/bw.json \
        ${SCRIPT_DIR}/jobs/job-trim.fio
echo "GOT BANDWIDTH"
BW=$(cat ${SCRIPT_DIR}/data/bw.json | grep -i "bw_bytes" | awk 'FNR == 6 {print $3}' | sed 's/,//g')
echo "Found Sustainable BW for Reset Rate Limiting: ${BW} B/sec"

## Make F2FS 
DEVNULL=$(sudo ${NULLBLK} 4096 7168)  # TODO: remove hardcode
sudo nvme zns reset-zone /dev/${DEV} -a
export DEVNULL
sudo env "PATH=${PATH}" mkfs.f2fs -f -m -c /dev/${DEV} /dev/${DEVNULL}
sudo mkdir -p /mnt/bench-f2fs
sudo mount -t f2fs /dev/${DEVNULL} /mnt/bench-f2fs

# Fill namespace 3
if [ "${WITH_RESET}" -eq "1" ]; then
    sudo env "DEV=${DEV}" "BS=${DEV_ZONE_SIZE}" "FILL_SIZE=700" "OFFSET_ZONES=${RESET_OFFSET_ZONES}" ${FIO} \
        --output-format=json \
        --output=${SCRIPT_DIR}/data/fill.json \
            ${SCRIPT_DIR}/jobs/fill.fio
    echo "FILL done"
fi


# Spawn concurrent reset/write workload
trim_rate_limit=$(echo "scale=2; 50 / 100  * ${BW}" | bc)
if [ "${WITH_RESET}" -eq "1" ]; then
    sudo env "DEV=${DEV}" \
        "OFFSET_ZONES_B=${WRITE_OFFSET_ZONES}" \
        "OFFSET_ZONES_C=${RESET_OFFSET_ZONES}" \
        "BS=${DEV_ZONE_SIZE}" \
        "RESET_LIMIT=${trim_rate_limit}"  ${FIO} \
            --output-format=json \
            --output=${SCRIPT_DIR}/data/conc-f2fs.json \
            ${SCRIPT_DIR}/jobs/concurrent-reset-write-intererference.fio &
else
    sudo env "DEV=$1" "OFFSET_ZONES_B=$2" "OFFSET_ZONES_C=$3" "BS=${DEV_ZONE_SIZE}" "RESET_LIMIT=${trim_rate_limit}" \
        ${FIO} \
            --output-format=json \
            --output=${SCRIPT_DIR}/data/conc2-f2fs.json \
                ${SCRIPT_DIR}/jobs/concurrent-write-intererference.fio &
fi
echo "Spawned dettached fio"

# Run RocksDB for 30 seconds
sudo ${DBBENCH} \
    --db=/mnt/bench-f2fs/db0 --wal_dir=/mnt/bench-f2fs/wal0 \
    --benchmarks=fillrandom \
    --use_existing_db=0 \
    --compression_type=none \
    --value_size=4000 \
    --key_size=16 \
    --target_file_size_base=$(($ZONE_CAP * 2 * 65 / 100)) \
    --use_direct_io_for_flush_and_compaction \
    --max_bytes_for_level_multiplier=4 \
    --max_background_jobs=8 \
    --use_direct_reads \
    --write_buffer_size=${WB_SIZE} \
    --seed=42 \
    --histogram=1 \
    --duration=30 \
    --use_fsync=1 \
    --sync=1 > ${SCRIPT_DIR}/data/${DATA_FILE_OUT}
echo "DONE with benchmark"
