#! /bin/bash

set -e

if [ $# != 1 ]; then
    echo "Usage: $0 <ZNS device (e.g., nvme0n2)>"
    exit 1
fi

if [ $(lsmod | grep -w 'zinc' | wc -l) != 1 ]; then
    echo "Missing ZINC I/O Scheduler Kernel module"
    echo "Follow the Readme Instructions to build and install the ZINC I/O Scheduler".
    exit 1
fi

DEV=$(echo $1 | sed 's/vme/g/g')
DEV_SECT_SIZE=$(cat /sys/block/$1/queue/hw_sector_size)
DEV_ZONE_SIZE_BLOCKS=$(cat /sys/block/$1/queue/chunk_sectors)
DEV_ZONE_SIZE=$(echo "${DEV_ZONE_SIZE_BLOCKS} * 512" | bc)
DEV_ZONES=$(cat /sys/block/$1/queue/nr_zones)

echo "#########################################################"
echo "####################### ZNS  SETUP ######################"
echo "#########################################################"
echo "---------------------------------------------------------"
printf 'DEV: %52s\n' "/dev/${DEV}"
echo "---------------------------------------------------------"
printf 'SECTOR_SIZE: %44s\n' "${DEV_SECT_SIZE}"
echo "---------------------------------------------------------"
printf 'ZONE_SIZE_BLOCKS: %39s\n' "${DEV_ZONE_SIZE_BLOCKS}"
echo "---------------------------------------------------------"
printf 'ZONE_SIZE_BYTES: %40s\n' "${DEV_ZONE_SIZE}"
echo "---------------------------------------------------------"
printf 'DEV_ZONES: %46s\n' "${DEV_ZONES}"
echo "---------------------------------------------------------"
echo ""

##################################
## fio options for specific ZNS ##
##################################
BS=$(echo "${DEV_SECT_SIZE} * ${DEV_ZONE_SIZE}" | bc)
TRIM_IODEPTH=1 # concurrent trim jobs to find trim bw limit
# Use 90% of the zones for resets and 10% for writes
FILL_SIZE=$(echo "scale=0; ${DEV_ZONES} * 0.9" | bc | sed 's/\.[0-9]*//g')
WRITE_ZONES=$(echo "${DEV_ZONES} - ${FILL_SIZE}" | bc) # All but the fill zones

WRITE_IODEPTH=(1 2 3 4 5 6 7) 

echo "#########################################################"
echo "###################### BENCH  SETUP #####################"
echo "#########################################################"
echo "---------------------------------------------------------"
printf 'TRIM_SIZE: %46s\n' "${BS}"
echo "---------------------------------------------------------"
printf 'FILL_ZONES (Zones filled for resets): %19s\n' "${FILL_SIZE}"
echo "---------------------------------------------------------"
printf 'WRITE_ZONES (Empty zones for writes): %19s\n' "${WRITE_ZONES}"
echo "---------------------------------------------------------"
printf 'WRITE_NUMJOBS: %42s\n' "${WRITE_IODEPTH[*]}"
echo "---------------------------------------------------------"
echo ""

mkdir -p data

#####################################
## Identify Reset Max. Performance ##
#####################################

echo "Benchmarking ZNS Device Reset Rate Limit"
sudo nvme zns reset-zone /dev/$1 -a
sudo env "DEV=${DEV}" "BS=${DEV_ZONE_SIZE}" "FILL_SIZE=${DEV_ZONES}" "TRIM_IODEPTH=${TRIM_IODEPTH}" ../fio/fio --output-format=json --output=data/bw.json job-trim.fio

BW=$(cat data/bw.json | grep -i "bw_bytes" | awk 'FNR == 6 {print $3}' | sed 's/,//g')
echo "Found Sustainable BW for Reset Rate Limiting: ${BW} B/sec"

###########################################################################################
## Identify Reset Performance Baseline at 50% reset rate limit without concurrent writes ##
###########################################################################################

echo ""
echo "Baseline Benchmarking 50% Reset Rate Limit"
trim_rate_limit=$(echo "scale=2; 50 / 100  * ${BW}" | bc)
sudo env "DEV=${DEV}" "BS=${DEV_ZONE_SIZE}" "FILL_SIZE=${FILL_SIZE}" "RESET_LIMIT=${trim_rate_limit}" ../fio/fio --output-format=json --output=data/data-reset_baseline-rflow-50.json job-baseline.fio

####################################################################
## Identify Baseline Write Performance with 0% Reset Interference ##
####################################################################

for write_iodepth in ${WRITE_IODEPTH[@]}; do
    WRITE_SIZE=$(echo "scale=0; ${WRITE_ZONES} / ${write_iodepth}" | bc)

    echo ""
    echo "Baseline Benchmarking 0% Reset with WRITE_IODEPTH ${write_iodepth}"
    sudo nvme zns reset-zone /dev/$1 -a
    echo "zinc" | sudo tee /sys/block/$1/queue/scheduler # use default zinc options for baseline (no resets in the baseline)

    sudo env "DEV=$1" "BS=${DEV_ZONE_SIZE}" "FILL_SIZE=${FILL_SIZE}" "WRITE_IODEPTH=${write_iodepth}" ../fio/fio --output-format=json --output=data/data-write_iod_${write_iodepth}-wflow_100.json job-bw.fio
done

##########################################
## Run the zinc configuration workloads ##
##########################################
RESET_TIME_CONFS=(1 10 20 50 100 250 500)
RESET_WRITE_RATIO_CONFS=(1000 5000 10000 25000 50000 100000)
TOTAL_WORKLOADS=$(${#RESET_TIME_CONFS[@]} * ${#RESET_WRITE_RATIO_CONFS[@]} * ${#WRITE_IODEPTH[@]})

echo ""
echo ""
echo "Benchmarking ZINC I/O Scheduler Configurations"

# Hardcode 180 zones as we can do ~30 zones per second at 50% reset limit
# hence allowing this to run exactly 1 minute, therefore decreasing fill time
FILL_SIZE=180
WL_COUNTER=1

for reset_time_conf in ${RESET_TIME_CONFS[@]}; do
    for reset_ratio_conf in ${RESET_WRITE_RATIO_CONFS[@]}; do

        cur_data="data-reset_time_${reset_time_conf}-reset_ratio_${reset_ratio_conf}"

        mkdir -p ${cur_data}

        for write_iodepth in ${WRITE_IODEPTH[@]}; do
            WRITE_SIZE=$(echo "scale=0; ${WRITE_ZONES} / ${write_iodepth}" | bc)

            echo ""
            echo "Benchmarking WRITE_JOBS ${write_iodepth}"
            sudo nvme zns reset-zone /dev/$1 -a

            echo "zinc" | sudo tee /sys/block/$1/queue/scheduler # use default zinc options for baseline (no resets in the baseline)
            echo ${reset_time_conf} | sudo tee /sys/block/$1/queue/iosched/reset_timer_interval
            echo ${reset_ratio_conf} | sudo tee /sys/block/$1/queue/iosched/write_ratio

            trim_rate_limit=$(echo "scale=2; 50 / 100  * ${BW}" | bc)
            sudo env "DEV=${DEV}" "BS=${DEV_ZONE_SIZE}" "FILL_SIZE=${FILL_SIZE}" "WRITE_IODEPTH=${write_iodepth}" "WRITE_SIZE=${WRITE_SIZE}" "RESET_LIMIT=${trim_rate_limit}" ../fio/fio --output-format=json --output=${cur_data}/data-write_iod_${write_iodepth}-wflow_50.json job.fio

            # FINISHED X% of .... (Workload 121/2334)
            PERCENTAGE_DONE=$(echo "scale=4; ${WL_COUNTER} / ${TOTAL_WORKLOADS} * 100" | bc)
            echo "FINISHED ${PERCENTAGE_DONE}% (Workloads ${WL_COUNTER}/${TOTAL_WORKLOADS})"
            WL_COUNTER+=1
        done
    done
done