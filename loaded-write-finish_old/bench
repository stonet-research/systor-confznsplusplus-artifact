#! /bin/bash

set -e

generate_global_job_options() {
    echo "[global]
name=loaded-finish
filename=/dev/${DEV}
ioengine=io_uring_cmd 
sqthread_poll=1
size=1z
bs=4K
group_reporting
zonemode=zbd
thread=1
lat_percentiles=1
" >> $1
}

generate_global_job_options_write() {
echo "[global]
name=loaded-finish
filename=/dev/${DEV}
ioengine=io_uring_cmd 
sqthread_poll=1
size=1z
group_reporting
zonemode=zbd
thread=1
lat_percentiles=1
iodepth=1

[write]
numjobs=\${WRITE_IODEPTH}
rw=write
bs=8K
size=\${CONCUR_WRITE_SIZE}z
offset_increment=\${CONCUR_WRITE_SIZE}z
time_based
runtime=1m
exitall
" >> $1
}

generate_finish_zone_subjob() {
echo "[fill-prep-$2]
offset=$2z
iodepth=1
rw=write
numjobs=1
size=4K
io_limit=4K

[finish-$2]
stonewall
offset=$2z
rw=trim
iodepth=1
numjobs=1
size=1z
bs=${DEV_ZONE_SIZE}
finish=1
" >> $1
}

generate_finish_zone_subjob_ratelimit() {
echo "[fill-prep-$2]
offset=$2z
iodepth=1
rw=write
numjobs=1
size=4K
io_limit=4K

[finish-$2]
stonewall
offset=$2z
rw=trim
iodepth=1
numjobs=1
size=1z
bs=${DEV_ZONE_SIZE}
rate=,,$3
finish=1
" >> $1
}

generate_finish_bw_job () {
    rm -rf job-finish.fio
    generate_global_job_options job-finish.fio

    for i in $(seq 1 ${FINISH_SIZE}); do
        generate_finish_zone_subjob job-finish.fio $i
    done
}

generate_finish_job () {
    rm -rf job.fio
    generate_global_job_options_write job.fio

    for i in $(seq 1 ${FINISH_SIZE}); do
        generate_finish_zone_subjob_ratelimit job.fio $i $1
    done
}

if [ $# != 1 ]; then
    echo "Usage: $0 <ZNS device (e.g., nvme0n2)>"
    exit 1
fi

DEV=$(echo $1 | sed 's/vme/g/g')
DEV_SECT_SIZE=$(cat /sys/block/$1/queue/hw_sector_size)
DEV_ZONE_SIZE_BLOCKS=$(cat /sys/block/$1/queue/chunk_sectors)
DEV_ZONE_SIZE=$(echo "${DEV_ZONE_SIZE_BLOCKS} * 512" | bc)
DEV_ZONES=$(cat /sys/block/$1/queue/nr_zones)

echo "#########################################################"
echo "####################### ZNS  SETUP ######################"
echo "#########################################################"
echo "---------------------------------------------------------"
printf 'DEV: %52s\n' "/dev/${DEV}"
echo "---------------------------------------------------------"
printf 'SECTOR_SIZE: %44s\n' "${DEV_SECT_SIZE}"
echo "---------------------------------------------------------"
printf 'ZONE_SIZE_BLOCKS: %39s\n' "${DEV_ZONE_SIZE_BLOCKS}"
echo "---------------------------------------------------------"
printf 'ZONE_SIZE_BYTES: %40s\n' "${DEV_ZONE_SIZE}"
echo "---------------------------------------------------------"
printf 'DEV_ZONES: %46s\n' "${DEV_ZONES}"
echo "---------------------------------------------------------"
echo ""

mkdir -p data

##################################
## fio options for specific ZNS ##
##################################
BS=$(echo "${DEV_SECT_SIZE} * ${DEV_ZONE_SIZE}" | bc)

CONCUR_FILL=4 # concurrent fill jobs to speedup filling
# Use 90% of the zones for finish and 10% for writes
# FINISH_SIZE=$(echo "scale=0; ${DEV_ZONES} * 0.9" | bc | sed 's/\.[0-9]*//g')
FINISH_SIZE=100
WRITE_ZONES=$(echo "${DEV_ZONES} - ${FINISH_SIZE}" | bc) # All but the fill zones

# our setup only has 20 cores and we have a polling thread for each job
# therefore we max to 9 write jobs, as there is 1 concurrent trim job
# issuing zone finish with also its own polling thread
WRITE_IODEPTH=(1 2 3 4 5 6 7) 
WRITE_FLOW=(100 99 95 90 75 50)

echo "#########################################################"
echo "###################### BENCH  SETUP #####################"
echo "#########################################################"
echo "---------------------------------------------------------"
printf 'FINISH_ZONES (Empty zones for finish): %18s\n' "${FINISH_SIZE}"
echo "---------------------------------------------------------"
printf 'WRITE_ZONES (Empty zones for writes): %19s\n' "${WRITE_ZONES}"
echo "---------------------------------------------------------"
printf 'WRITE_NUMJOBS: %42s\n' "${WRITE_IODEPTH[*]}"
echo "---------------------------------------------------------"
printf 'WRITE_RATE_FLOWS: %39s\n' "${WRITE_FLOW[*]}"
echo "---------------------------------------------------------"
echo ""

# generate_finish_bw_job ${DEV_ZONE_SIZE}

echo "Benchmarking ZNS Device Finish Rate Limit"
sudo nvme zns reset-zone /dev/$1 -a
# sudo env "DEV=${DEV}" "BS=${DEV_ZONE_SIZE}" ../fio/fio --output-format=json --output=data/bw.json job-finish.fio

BW=$(cat data/bw.json | grep -A200 -ie 'jobname\" : \"finish' | grep -A5 -ie 'zns finish' | grep -ie 'bw_bytes' | awk '{print $3}' | sed 's/,//g' | awk '{s+=$1}END{OFMT="%f";print s/NR}')
echo "Found Sustainable BW for Finish Rate Limiting: ${BW} B/sec"

for write_iodepth in ${WRITE_IODEPTH[@]}; do
    for write_flow in ${WRITE_FLOW[@]}; do
        finish_flow=$((100 - ${write_flow}))
        WRITE_SIZE=$(echo "scale=0; ${WRITE_ZONES} / ${write_iodepth}" | bc)

        echo ""
        echo "Benchmarking WRITE_IODEPTH ${write_iodepth}: <WRITE_FLOW ${write_flow} - FINISH_LIMIT ${finish_flow}>"
        sudo nvme zns reset-zone /dev/$1 -a

        if [[ ${finish_flow} -eq 0 ]]; then
            # With 0 finish flow we want to disable the concurrent finish workload
            CONCUR_WRITE_SIZE=$(echo "scale=0; ${WRITE_ZONES} / ${write_iodepth}" | bc)
            # sudo env "DEV=${DEV}" "CONCUR_WRITE_SIZE=${CONCUR_WRITE_SIZE}" "WRITE_IODEPTH=${write_iodepth}" ../fio/fio --output-format=json --output=data/data-write_iod_${write_iodepth}-wflow_${write_flow}.json job-write.fio
        else
            CONCUR_WRITE_SIZE=$(echo "scale=0; ${WRITE_ZONES} / ${write_iodepth}" | bc)
            finish_rate_limit=$(echo "scale=2; ${finish_flow} / 100  * ${BW}" | bc)
            # generate_finish_job ${finish_rate_limit} we can't rate limit with fio using this job design
            sudo env "DEV=${DEV}" "CONCUR_WRITE_SIZE=${CONCUR_WRITE_SIZE}" "WRITE_IODEPTH=${write_iodepth}" "FINISH_SIZE=${FINISH_SIZE}" "FINISH_LIMIT=${finish_rate_limit}" ../fio/fio --output-format=json --output=data/data-write_iod_${write_iodepth}-wflow_${write_flow}.json job.fio
        fi
    done
done

